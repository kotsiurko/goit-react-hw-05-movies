{"version":3,"file":"static/js/806.232c5ead.chunk.js","mappings":"wNAEaA,EAAYC,EAAAA,GAAAA,IAAH,2GAMTC,EAAcD,EAAAA,GAAAA,IAAH,uHASXE,EAAWF,EAAAA,GAAAA,GAAH,uH,mBCbfG,EAAU,IAAIC,EAAAA,EAoBpB,EAlBiB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACR,EAAD,UACGM,EAAOG,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAC9B,OACE,SAACV,EAAD,WACE,UAAC,KAAD,CAAMW,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMR,GAA1C,WACE,gBAAKS,IAAKZ,EAAQa,UAAUP,GAAcQ,IAAI,MAC9C,SAACf,EAAD,UAAWS,QAHGD,EAOrB,KAGN,C,6FCjBKP,EAAU,IAAIC,EAAAA,EAwBpB,UAtBiB,WAEf,OAA4Bc,EAAAA,EAAAA,UAAS,IAArC,eAAOb,EAAP,KAAec,EAAf,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACRjB,EAAQkB,mBAAmBC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACjCJ,EAAUI,EAAKC,QAChB,IACEC,OAAM,SAAAC,GACLC,EAAAA,GAAAA,MAAA,gCAAqCD,EAArC,sBAA8D,CAC5DE,SAAUD,EAAAA,GAAAA,SAAAA,YAEb,GACJ,GAAE,KAGD,2BACE,SAAC,IAAD,CAAUtB,OAAQA,KAGvB,C,wJCzBYD,EAAb,wFACc,iCADd,gDAEa,oCAFb,gDAIE,WACE,OAAOyB,EAAAA,EAAAA,IAAA,kBACFC,KADE,sDAC4CA,KAD5C,OAGR,GARH,yBAUE,SAAYC,GACV,OAAOF,EAAAA,EAAAA,IAAA,kBAAaC,KAAb,+CAAoDA,KAApD,wBAA2EC,GACnF,GAZH,4BAcE,SAAerB,GAAK,IAAD,OACjB,OAAOmB,EAAAA,EAAAA,IAAA,kBAAaC,KAAb,wBAAqCpB,EAArC,4BAAmDoB,KAAnD,QACJR,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACCS,EAAuET,EAAvES,cAAerB,EAAwDY,EAAxDZ,MAAOsB,EAAiDV,EAAjDU,aAAcC,EAAmCX,EAAnCW,aAAcC,EAAqBZ,EAArBY,SAAUC,EAAWb,EAAXa,OACpE,MAAO,CACLJ,cAAAA,EACArB,MAAAA,EACAsB,aAAcA,EAAaI,UAAU,EAAG,GACxCH,aAAAA,EACAC,SAAAA,EACAC,OAAQ,EAAKE,UAAUF,GAE1B,GACJ,GA3BH,uBA6BE,SAAU1B,GACR,OAAOmB,EAAAA,EAAAA,IAAA,kBAAaC,KAAb,wBAAqCpB,EAArC,oCAA2DoB,KAA3D,OACR,GA/BH,0BAiCE,SAAapB,GACX,OAAOmB,EAAAA,EAAAA,IAAA,kBAAaC,KAAb,wBAAqCpB,EAArC,oCAA2DoB,KAA3D,OACR,GAnCH,uBAqCE,SAAUS,GACR,OAAOA,EAAG,yCAAqCA,GAAQ,yFACxD,GAvCH,uBAyCE,SAAUC,GACR,OAAQA,EAASC,QAAO,SAACC,EAAaC,GAAd,OAA+BD,EAAc,KAAOC,EAAaC,IAAjE,GAAuE,IAAKC,OAAO,EAC5G,KA3CH,I","sources":["components/FilmList/FilmList.styled.js","components/FilmList/FilmList.jsx","pages/HomePage/HomePage.js","services.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 42px;\n`;\n\nexport const CardWrapper = styled.div`\n  border: 1px solid black;\n  border-radius: 4px;\n\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const FilmName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n  font-size: 14px;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { Container, CardWrapper, FilmName } from './FilmList.styled';\nimport { MovieDB } from '../../services';\n\nconst movieDB = new MovieDB();\n\nconst FilmList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <Container>\n      {movies.map(({ poster_path, id, title }) => {\n        return (\n          <CardWrapper key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <img src={movieDB.getImgSrc(poster_path)} alt=\"\" />\n              <FilmName>{title}</FilmName>\n            </Link>\n          </CardWrapper>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default FilmList;\n","import FilmList from '../../components/FilmList/FilmList';\nimport { MovieDB } from '../../services';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nconst movieDB = new MovieDB();\n\nconst HomePage = () => {\n\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    movieDB.fetchTrendMovies().then(({ data }) => {\n      setMovies(data.results);\n    })\n      .catch(err => {\n        toast.error(`Something went wrong! ${err}. Try again later.`, {\n          position: toast.POSITION.TOP_CENTER\n        });\n      });;\n  }, []);\n\n  return (\n    <main>\n      <FilmList movies={movies} />\n    </main>\n  );\n};\n\nexport default HomePage;","import axios from 'axios';\n\nexport class MovieDB {\n  #BASE_URL = 'https://api.themoviedb.org/3';\n  #API_KEY = 'b04a034fc18f8d6bb9fee9f009f99d0d';\n\n  fetchTrendMovies() {\n    return axios.get(\n      `${this.#BASE_URL}/trending/movie/week?api_key=${this.#API_KEY}`\n    );\n  }\n\n  fetchSearch(query) {\n    return axios.get(`${this.#BASE_URL}/search/movie?api_key=${this.#API_KEY}&query=${query}`);\n  }\n\n  fetchMovieById(id) {\n    return axios.get(`${this.#BASE_URL}/movie/${id}?api_key=${this.#API_KEY}`)\n      .then(({ data }) => {\n        const { backdrop_path, title, release_date, vote_average, overview, genres } = data;\n        return {\n          backdrop_path,\n          title,\n          release_date: release_date.substring(0, 4),\n          vote_average,\n          overview,\n          genres: this.getGenres(genres),\n        };\n      });\n  }\n\n  fetchCast(id) {\n    return axios.get(`${this.#BASE_URL}/movie/${id}/credits?api_key=${this.#API_KEY}`);\n  }\n\n  fetchReviews(id) {\n    return axios.get(`${this.#BASE_URL}/movie/${id}/reviews?api_key=${this.#API_KEY}`);\n  }\n\n  getImgSrc(url) {\n    return url ? `https://image.tmdb.org/t/p/w500${url}` : 'https://raw.githubusercontent.com/kotsiurko/filmoteka/dev/src/images/default-photo.jpeg'\n  }\n\n  getGenres(genreArr) {\n    return (genreArr.reduce((accumulator, currentValue) => accumulator + ', ' + currentValue.name, '')).substr(2)\n  }\n}"],"names":["Container","styled","CardWrapper","FilmName","movieDB","MovieDB","movies","location","useLocation","map","poster_path","id","title","to","state","from","src","getImgSrc","alt","useState","setMovies","useEffect","fetchTrendMovies","then","data","results","catch","err","toast","position","axios","this","query","backdrop_path","release_date","vote_average","overview","genres","substring","getGenres","url","genreArr","reduce","accumulator","currentValue","name","substr"],"sourceRoot":""}