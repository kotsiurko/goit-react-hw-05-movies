{"version":3,"file":"static/js/321.0f8b41ce.chunk.js","mappings":"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","sources":["components/FilmList/FilmList.styled.js","components/FilmList/FilmList.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.js","services.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 42px;\n`;\n\nexport const CardWrapper = styled.div`\n  border: 1px solid black;\n  border-radius: 4px;\n\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const FilmName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n  font-size: 14px;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { Container, CardWrapper, FilmName } from './FilmList.styled';\nimport { MovieDB } from '../../services';\n\nconst movieDB = new MovieDB();\n\nconst FilmList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <Container>\n      {movies.map(({ poster_path, id, title }) => {\n        return (\n          <CardWrapper key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <img src={movieDB.getImgSrc(poster_path)} alt=\"\" />\n              <FilmName>{title}</FilmName>\n            </Link>\n          </CardWrapper>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default FilmList;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 16px;\n  text-transform: uppercase;\n`\n\nexport const Input = styled.input`\n  padding: 8px 32px 8px 8px;\n  border-radius: 4px;\n`;\n\nexport const Button = styled.button`\n  margin-left: 8px;\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-transform: uppercase;\n`;\n","import { useSearchParams } from 'react-router-dom';\nimport { MovieDB } from '../../services';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport FilmList from 'components/FilmList/FilmList';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Wrapper, Input, Button } from './Movies.styled';\n\nconst movieDB = new MovieDB();\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const searchQuery = event.target[0].value;\n\n    if (searchQuery === '') {\n      toast.warn(\"Please, enter correct query!\", {\n        position: toast.POSITION.TOP_CENTER\n      });\n      return;\n    }\n\n    setSearchParams({ query: searchQuery });\n  };\n\n\n  useEffect(() => {\n\n    const movieTitle = searchParams.get('query');\n    if (movieTitle) {\n      movieDB.fetchSearch(movieTitle).then(({ data }) => {\n        setMovies(data.results);\n      });\n    }\n\n  }, [searchParams]);\n\n  return (\n    <>\n      <Wrapper>\n        <form onSubmit={handleSubmit}>\n          <Input\n            placeholder=\"Search...\"\n          // value={}\n          />\n\n          <Button type=\"submit\">Search</Button>\n\n        </form>\n      </Wrapper>\n      {movies.length > 0 && <FilmList movies={movies} />}\n      <ToastContainer />\n    </>\n  );\n};\n\nexport default Movies;","import axios from 'axios';\n\nexport class MovieDB {\n  #BASE_URL = 'https://api.themoviedb.org/3';\n  #API_KEY = 'b04a034fc18f8d6bb9fee9f009f99d0d';\n\n  fetchTrendMovies() {\n    return axios.get(\n      `${this.#BASE_URL}/trending/movie/week?api_key=${this.#API_KEY}`\n    );\n  }\n\n  fetchSearch(query) {\n    return axios.get(`${this.#BASE_URL}/search/movie?api_key=${this.#API_KEY}&query=${query}`);\n  }\n\n  fetchMovieById(id) {\n    return axios.get(`${this.#BASE_URL}/movie/${id}?api_key=${this.#API_KEY}`)\n      .then(({ data }) => {\n        const { backdrop_path, title, release_date, vote_average, overview, genres } = data;\n        return {\n          backdrop_path,\n          title,\n          release_date: release_date.substring(0, 4),\n          vote_average,\n          overview,\n          genres: this.getGenres(genres),\n        };\n      });\n  }\n\n  fetchCast(id) {\n    return axios.get(`${this.#BASE_URL}/movie/${id}/credits?api_key=${this.#API_KEY}`);\n  }\n\n  fetchReviews(id) {\n    return axios.get(`${this.#BASE_URL}/movie/${id}/reviews?api_key=${this.#API_KEY}`);\n  }\n\n  getImgSrc(url) {\n    return url ? `https://image.tmdb.org/t/p/w500${url}` : 'https://raw.githubusercontent.com/kotsiurko/filmoteka/dev/src/images/default-photo.jpeg'\n  }\n\n  getGenres(genreArr) {\n    return (genreArr.reduce((accumulator, currentValue) => accumulator + ', ' + currentValue.name, '')).substr(2)\n  }\n}"],"names":["Container","styled","CardWrapper","FilmName","movieDB","MovieDB","movies","location","useLocation","map","poster_path","id","title","to","state","from","src","getImgSrc","alt","Wrapper","Input","Button","useState","setMovies","useSearchParams","searchParams","setSearchParams","useEffect","movieTitle","get","fetchSearch","then","data","results","onSubmit","event","preventDefault","searchQuery","target","value","query","toast","position","placeholder","type","length","FilmList","axios","this","backdrop_path","release_date","vote_average","overview","genres","substring","getGenres","url","genreArr","reduce","accumulator","currentValue","name","substr"],"sourceRoot":""}