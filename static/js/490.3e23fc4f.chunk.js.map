{"version":3,"file":"static/js/490.3e23fc4f.chunk.js","mappings":"uNAKMA,EAAU,IAAIC,EAAAA,EAoDpB,UAlDoB,WAAO,IAAD,IAEhBC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,iBAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAUG,aAAb,aAAG,EAAiBC,YAApB,QAA4B,IAY9C,IAVAC,EAAAA,EAAAA,YAAU,WACRZ,EAAQa,eAAeX,GACpBY,KAAKR,GACLS,OAAM,SAAAC,GACLC,EAAAA,GAAAA,MAAA,gCAAqCD,EAArC,sBAA8D,CAC5DE,SAAUD,EAAAA,GAAAA,SAAAA,YAEb,GACJ,GAAE,CAACf,KAECG,EAAM,OAAO,KAElB,IAAQc,EAAuEd,EAAvEc,cAAeC,EAAwDf,EAAxDe,MAAOC,EAAiDhB,EAAjDgB,aAAcC,EAAmCjB,EAAnCiB,aAAcC,EAAqBlB,EAArBkB,SAAUC,EAAWnB,EAAXmB,OAEpE,OACE,6BACE,SAAC,KAAD,CAAMC,GAAIhB,EAAV,sBACA,gBAAKiB,IAAK1B,EAAQ2B,UAAUR,GAAgBS,IAAI,MAChD,4BACE,0BACGR,EADH,KACYC,EADZ,QAGA,wCACeC,MAEf,sCACaC,MAEb,oCACWC,SAGb,kBAjBF,0BAmBE,wBAAG,SAAC,KAAD,CAAMC,GAAG,OAAOf,MAAO,CAAEC,KAAMF,GAA/B,qBACH,wBAAG,SAAC,KAAD,CAAMgB,GAAG,UAAUf,MAAO,CAAEC,KAAMF,GAAlC,uBACH,mBACA,SAAC,KAAD,MAGL,C,wJCrDYR,EAAb,wFACc,iCADd,gDAEa,oCAFb,gDAIE,WACE,OAAO4B,EAAAA,EAAAA,IAAA,kBACFC,KADE,sDAC4CA,KAD5C,OAGR,GARH,yBAUE,SAAYC,GACV,OAAOF,EAAAA,EAAAA,IAAA,kBAAaC,KAAb,+CAAoDA,KAApD,wBAA2EC,GACnF,GAZH,4BAcE,SAAe7B,GAAK,IAAD,OACjB,OAAO2B,EAAAA,EAAAA,IAAA,kBAAaC,KAAb,wBAAqC5B,EAArC,4BAAmD4B,KAAnD,QACJhB,MAAK,YAAe,IAAZkB,EAAW,EAAXA,KACCb,EAAuEa,EAAvEb,cAAeC,EAAwDY,EAAxDZ,MAAOC,EAAiDW,EAAjDX,aAAcC,EAAmCU,EAAnCV,aAAcC,EAAqBS,EAArBT,SAAUC,EAAWQ,EAAXR,OACpE,MAAO,CACLL,cAAAA,EACAC,MAAAA,EACAC,aAAcA,EAAaY,UAAU,EAAG,GACxCX,aAAAA,EACAC,SAAAA,EACAC,OAAQ,EAAKU,UAAUV,GAE1B,GACJ,GA3BH,uBA6BE,SAAUtB,GACR,OAAO2B,EAAAA,EAAAA,IAAA,kBAAaC,KAAb,wBAAqC5B,EAArC,oCAA2D4B,KAA3D,OACR,GA/BH,0BAiCE,SAAa5B,GACX,OAAO2B,EAAAA,EAAAA,IAAA,kBAAaC,KAAb,wBAAqC5B,EAArC,oCAA2D4B,KAA3D,OACR,GAnCH,uBAqCE,SAAUK,GACR,OAAOA,EAAG,yCAAqCA,GAAQ,yFACxD,GAvCH,uBAyCE,SAAUC,GACR,OAAQA,EAASC,QAAO,SAACC,EAAaC,GAAd,OAA+BD,EAAc,KAAOC,EAAaC,IAAjE,GAAuE,IAAKC,OAAO,EAC5G,KA3CH,I","sources":["pages/FilmDetails/FilmDetails.js","services.js"],"sourcesContent":["import { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { MovieDB } from '../../services';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nconst movieDB = new MovieDB();\n\nconst FilmDetails = () => {\n\n  const { id } = useParams();\n  const [film, setFilm] = useState(null);\n  const location = useLocation();\n\n  const backLinkHref = location?.state?.from ?? '/';\n\n  useEffect(() => {\n    movieDB.fetchMovieById(id)\n      .then(setFilm)\n      .catch(err => {\n        toast.error(`Something went wrong! ${err}. Try again later.`, {\n          position: toast.POSITION.TOP_CENTER\n        });\n      });\n  }, [id]);\n\n  if (!film) return null;\n\n  const { backdrop_path, title, release_date, vote_average, overview, genres } = film;\n\n  return (\n    <main>\n      <Link to={backLinkHref}>Go back</Link>\n      <img src={movieDB.getImgSrc(backdrop_path)} alt=\"\" />\n      <div>\n        <h2>\n          {title} ({release_date})\n        </h2>\n        <p>\n          User score: {vote_average}\n        </p>\n        <p>\n          Overview: {overview}\n        </p>\n        <p>\n          Genres: {genres}\n        </p>\n      </div>\n      <hr />\n      Additional information\n      <p><Link to='cast' state={{ from: backLinkHref }}>Cast</Link></p>\n      <p><Link to='reviews' state={{ from: backLinkHref }}>Review</Link></p>\n      <hr />\n      <Outlet />\n    </main>\n  );\n};\n\nexport default FilmDetails;","import axios from 'axios';\n\nexport class MovieDB {\n  #BASE_URL = 'https://api.themoviedb.org/3';\n  #API_KEY = 'b04a034fc18f8d6bb9fee9f009f99d0d';\n\n  fetchTrendMovies() {\n    return axios.get(\n      `${this.#BASE_URL}/trending/movie/week?api_key=${this.#API_KEY}`\n    );\n  }\n\n  fetchSearch(query) {\n    return axios.get(`${this.#BASE_URL}/search/movie?api_key=${this.#API_KEY}&query=${query}`);\n  }\n\n  fetchMovieById(id) {\n    return axios.get(`${this.#BASE_URL}/movie/${id}?api_key=${this.#API_KEY}`)\n      .then(({ data }) => {\n        const { backdrop_path, title, release_date, vote_average, overview, genres } = data;\n        return {\n          backdrop_path,\n          title,\n          release_date: release_date.substring(0, 4),\n          vote_average,\n          overview,\n          genres: this.getGenres(genres),\n        };\n      });\n  }\n\n  fetchCast(id) {\n    return axios.get(`${this.#BASE_URL}/movie/${id}/credits?api_key=${this.#API_KEY}`);\n  }\n\n  fetchReviews(id) {\n    return axios.get(`${this.#BASE_URL}/movie/${id}/reviews?api_key=${this.#API_KEY}`);\n  }\n\n  getImgSrc(url) {\n    return url ? `https://image.tmdb.org/t/p/w500${url}` : 'https://raw.githubusercontent.com/kotsiurko/filmoteka/dev/src/images/default-photo.jpeg'\n  }\n\n  getGenres(genreArr) {\n    return (genreArr.reduce((accumulator, currentValue) => accumulator + ', ' + currentValue.name, '')).substr(2)\n  }\n}"],"names":["movieDB","MovieDB","id","useParams","useState","film","setFilm","location","useLocation","backLinkHref","state","from","useEffect","fetchMovieById","then","catch","err","toast","position","backdrop_path","title","release_date","vote_average","overview","genres","to","src","getImgSrc","alt","axios","this","query","data","substring","getGenres","url","genreArr","reduce","accumulator","currentValue","name","substr"],"sourceRoot":""}